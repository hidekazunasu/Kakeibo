@page "/accountmanagement"
@using webapi.Models
@inject HttpClient Http
@using System.Net.Http.Json

<PageTitle>Home</PageTitle>

<h1>口座一覧</h1>

<!-- 口座一覧テーブル -->
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>口座名</th>
            <th>残高</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in accounts)
        {
            <tr>
                <td>@account.Id</td>
                <td>@account.Name</td>
                <td>@account.Balance</td>
            </tr>
        }
    </tbody>
</table>

<!-- 口座追加フォーム -->
<div class="mt-3">
    <h2>口座追加</h2>
    <form @onsubmit="AddAccount">
        <div class="form-group">
            <label for="accountName">口座名</label>
            <input type="text" class="form-control" id="accountName" @bind="newAccount.Name" required>
        </div>
        <div class="form-group">
            <label for="initialBalance">初期残高</label>
            <input type="number" class="form-control" id="initialBalance" @bind="newAccount.Balance" required>
        </div>
        <button type="submit" class="btn btn-primary">追加</button>
    </form>
</div>

@code
{
    private Account[] accounts;
    private Account newAccount = new Account();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        accounts = await Http.GetFromJsonAsync<Account[]>("https://127.0.0.1:7150/Accounty");
    }

    private async Task AddAccount()
    {
        // Web API に口座を追加する
        var response = await Http.PostAsJsonAsync("https://127.0.0.1:7150/Accounty", newAccount);

        if (response.IsSuccessStatusCode)
        {
            // 追加が成功したら口座一覧を再読み込み
            await LoadAccounts();

            // 追加した口座のフィールドをクリア
            newAccount = new Account();
        }
        else
        {
            // エラー処理をここに追加
            // response.StatusCode や response.ReasonPhrase を利用してエラー情報を取得できます
        }
    }
}
